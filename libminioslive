#!/bin/bash

# Function library for MiniOS utilities
# Author: crims0n. <http://minios.dev>
#

#------- LIBMINIOSLIVE -------

# The `console_colors` function defines a series of variables that correspond to different text colors and styles that can be used in console output.
# Usage:
#   console_colors
#   echo -e "${RED}This is red text${ENDCOLOR}"
#
# The function does not take any arguments, and it needs to be called before using any of the color or style variables in your script.
console_colors() {
    # Standard colors
    RED="\e[31m"
    GREEN="\e[32m"
    YELLOW="\e[33m"
    BLUE="\e[34m"
    MAGENTA="\e[35m"
    CYAN="\e[36m"

    # Dark colors
    DARKGRAY="\e[90m"
    DARKRED="\e[38;5;52m"
    DARKGREEN="\e[38;5;22m"

    # Light colors
    LIGHTGRAY="\e[37m"
    LIGHTRED="\e[91m"
    LIGHTGREEN="\e[92m"
    LIGHTYELLOW="\e[93m"
    LIGHTBLUE="\e[94m"
    LIGHTMAGENTA="\e[95m"
    LIGHTCYAN="\e[96m"

    # Neon Colors
    BRIGHTORANGE="\e[38;5;202m"
    BRIGHTGREEN="\e[38;5;46m"

    # Other colors
    ORANGE="\e[38;5;214m"
    GOLD="\e[38;5;220m"
    PURPLE="\e[38;5;93m"
    PINK="\e[38;5;13m"
    TEAL="\e[38;5;6m"
    NAVY="\e[38;5;18m"

    # Text formatting
    BOLD="\e[1m"
    DIM="\e[2m"
    UNDERLINED="\e[4m"
    BLINK="\e[5m"
    REVERSE="\e[7m"
    HIDDEN="\e[8m"

    # Formatting reset
    ENDCOLOR="\e[0m"
}

# A function to read specific variables from a configuration file in Bash.
# Usage:
#   read_config CONFIG_FILE VAR1 VAR2 [...]
#
# Arguments:
#   CONFIG_FILE - Required. This is the path to your configuration file.
#   VAR1, VAR2, etc - Required. The names of variables you wish to read from the configuration file.
#   Note: It's important to specify the variable names you want to read, as the function won't read any variables if none are specified.
read_config() {
    # Enable extended globbing. This is required for the pattern matching of variable names.
    shopt -s extglob

    # The first argument is the configuration file.
    local CONFIG_FILE="${1}"

    # All other arguments are the variable names to look for.
    local KEYLIST="${@:2}"

    # Check if the configuration file is set, exists and is readable.
    if [[ ! "$CONFIG_FILE" ]]; then
        error "No configuration file given"
        exit 1
    fi
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not a file!"
        exit 1
    fi
    if [[ ! -r "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not readable!"
        exit 1
    fi

    # Convert the list of variable names to a regex pattern.
    KEYLIST="${KEYLIST// /|}"

    # Read each line of the file.
    while IFS='= ' read -r LHS RHS; do
        # If the variable name is in our list and the value is not empty...
        if [[ "${LHS}" =~ ^(${KEYLIST})$ ]] && [[ -n ${RHS} ]]; then
            # Remove any quotes around the value.
            RHS="${RHS%\"*}"
            RHS="${RHS#\"*}"
            RHS="${RHS%\'*}"
            RHS="${RHS#\'*}"

            # If the value is an array (surrounded by parentheses)...
            if [[ "${RHS}" =~ ^\((.*)\)$ ]]; then
                # Assign the array to the variable.
                eval ${LHS}=\("${BASH_REMATCH[1]}"\)
            else
                # Otherwise, assign the value to the variable.
                eval ${LHS}=\"${RHS}\"
            fi
        fi
    done <<<"$(tr -d '\r' <${CONFIG_FILE})"

    # Disable extended globbing after we're done using it.
    shopt -u extglob
}

# A function for updating a configuration file in bash.
# Usage:
#   update_config CONFIG_FILE [VAR1] [VAR2] [...]
#
# Arguments:
#   CONFIG_FILE - required, this is the path to your configuration file.
#   VAR1, VAR2, etc - the names of variables you wish to update in the configuration file.
#   If variable names are not provided, the function will update all variables found in the file.
update_config() {
    # The configuration file is passed as the first argument
    local CONFIG_FILE="${1}"
    shift

    # Check if the configuration file is set, exists and is readable.
    if [[ ! "$CONFIG_FILE" ]]; then
        error "No configuration file given"
        exit 1
    fi
    if [[ ! -f "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not a file!"
        exit 1
    fi
    if [[ ! -r "${CONFIG_FILE}" ]]; then
        error "${CONFIG_FILE} is not readable!"
        exit 1
    fi

    local -a ARGS

    if (($# > 0)); then
        # Use provided variable names
        ARGS=("$@")
    else
        # Extract variable names from the config file
        ARGS=($(grep -v '^#' "${CONFIG_FILE}" | awk -F '=' '{print $1}'))
    fi

    # Iterate over every variable
    for ARG in "${ARGS[@]}"; do
        local -n VAR="${ARG}"
        local NEW_VALUE ELEMENT

        # If the variable is empty, continue to next
        if [[ -z "${VAR[@]}" ]]; then
            continue
        fi

        # Check if the variable is an array or a simple variable
        case "$(declare -p "${ARG}" 2>/dev/null)" in
        "declare -a"*)
            # If it's an array, construct the new value as an array
            NEW_VALUE="${ARG}=("
            for ELEMENT in "${VAR[@]}"; do
                NEW_VALUE+="\"${ELEMENT}\""
                [[ "${ELEMENT}" != "${VAR[-1]}" ]] && NEW_VALUE+=" "
            done
            NEW_VALUE+=")"
            ;;
        *)
            # If it's a simple variable, construct the new value as a string
            NEW_VALUE="${ARG}=\"${VAR}\""
            ;;
        esac

        # If the variable already exists in the configuration file, replace the old value with the new one
        if grep -q "^${ARG}=" "${CONFIG_FILE}"; then
            sed -i "s|^${ARG}=.*|${NEW_VALUE}|" "${CONFIG_FILE}"
        else
            # If the variable does not exist, append the variable and its value to the end of the configuration file
            echo -e "\n${NEW_VALUE}" >>"${CONFIG_FILE}"
        fi
    done

    # Remove empty lines from the configuration file
    #sed -i '/^$/d' "${CONFIG_FILE}"

    # Sort the lines in the configuration file in alphabetical order
    #sort -o "${CONFIG_FILE}" "${CONFIG_FILE}"
}

# A function to read a specific value from a configuration file in Bash.
# Usage:
#   VAR=$(read_config_value CONFIG_FILE VAR)
#
# Arguments:
#   CONFIG_FILE - Required. This is the path to your configuration file.
#   VAR - Required. The name of the variable you wish to read from the configuration file.
read_config_value() {
    if [ ! -f "$1" ]; then
        echo
        return
    fi
    if grep -q "^$2=" $1; then
        grep "^$2=" $1 | cut -d "=" -f 2- | tail -n 1 | sed -e "s/^['\"]//;s/['\"]$//"
    else
        echo
    fi
}

# A function for parsing command line input from kernel parameters.
# Usage:
#   read_cmdline /proc/cmdline
read_cmdline() {
    for i in "${@}"; do
        case $i in
        user_name=*)
            USER_NAME="${i#*=}"
            shift
            ;;
        user_password=*)
            USER_PASSWORD="${i#*=}"
            shift
            ;;
        root_password=*)
            ROOT_PASSWORD="${i#*=}"
            shift
            ;;
        host_name=*)
            HOST_NAME="${i#*=}"
            shift
            ;;
        default_target=*)
            DEFAULT_TARGET="${i#*=}"
            shift
            ;;
        text)
            TEXT_MODE="true"
            shift
            ;;
        enable_services=*)
            ENABLE_SERVICES="${i#*=}"
            shift
            ;;
        disable_services=*)
            DISABLE_SERVICES="${i#*=}"
            shift
            ;;
        ssh_key=*)
            SSH_KEY="${i#*=}"
            shift
            ;;
        ${LIVEKITNAME}.flags=*)
            FLAGS="${i#*=}"
            shift
            ;;
        slax.flags=*)
            SFLAGS="${i#*=}"
            shift
            ;;
        toram)
            TORAM="true"
            shift
            ;;
        perchdir=*)
            PERCHDIR="${i#*=}"
            shift
            ;;
        scripts=*)
            SCRIPTS="${i#*=}"
            shift
            ;;
        cloud)
            CLOUD="true"
            shift
            ;;
        hide_credentials)
            HIDE_CREDENTIALS="true"
            shift
            ;;
        static_profiles)
            STATIC_PROFILES="true"
            shift
            ;;
        autologin)
            AUTOLOGIN="true"
            shift
            ;;
        link_user_dirs)
            LINK_USER_DIRS="true"
            shift
            ;;
        system_type=*)
            SYSTEM_TYPE="${i#*=}"
            shift
            ;;
        from=*)
            FROM="${i#*=}"
            shift
            ;;
        *)
            UNKNOWN="true"
            ;;
        esac
    done
}

# Function to determine device name of a given directory
get_device() {
    local DEVICE=$(df "$1" | awk 'NR==2 {print $1}')
    echo "${DEVICE}"
}

# Function to determine the device name of a given directory
get_device_name() {
    local DEVICE_NAME=$(df "$1" | awk 'NR==2 {print $1}' | awk -F/ '{print $NF}')
    echo "${DEVICE_NAME}"
}

# Function to determine filesystem type of a given directory
get_filesystem_type() {
    local DEVICE=$(df "$1" | awk 'NR==2 {print $1}')
    local FS_TYPE=$(blkid -o value -s TYPE "$DEVICE")
    echo "${FS_TYPE}"
}

# Returns the mount point of the disk containing the given directory
get_mount_point() {
    local MOUNT_POINT=$(df "$1" | awk 'NR==2 {print $6}')
    echo "${MOUNT_POINT}"
}

# This function sets up a new system user, creates user directories,
# optionally creates symbolic links to shared directories, and configures
# necessary permissions and files such as .ssh/authorized_keys.
# Arguments:
#   1. USER_NAME: The name of the user to set up.
#   2. TARGET_DIR: The target directory where user directories will be linked.
#   3. LINK_USER_DIRS: A flag to determine if user directories should be linked (true/false).
#   4. WRITABLE: A flag to determine if the target directories should be writable (true/false).
user_setup() {
    local USER_NAME="$1"
    local MEDIA="$2"
    local LINK_USER_DIRS="${3:-false}"
    local WRITABLE="${4:-false}"

    local FS_TYPE
    local TARGET_DIR
    local USER_ID
    local GROUP_ID

    # Retrieve filesystem type and mount point
    FS_TYPE=$(get_filesystem_type "${MEDIA}") || {
        error "Unable to determine filesystem type for ${MEDIA}"
        return 1
    }
    TARGET_DIR=$(get_mount_point "${MEDIA}") || {
        error "Unable to determine mount point for ${MEDIA}"
        return 1
    }

    information "Setting up user: ${USER_NAME}"
    information "Target directory: ${TARGET_DIR}"
    information "Link user directories: ${LINK_USER_DIRS}"
    information "Writable target directories: ${WRITABLE}"
    information "Filesystem type: ${FS_TYPE}"

    # Check if the system is already configured
    if [ ! -f /var/.system_configured ]; then
        information "Creating new user ${USER_NAME}"
        adduser --uid 1000 --gecos '' "${USER_NAME}" --disabled-password || {
            error "Failed to create user ${USER_NAME}"
            return 1
        }
    else
        warning "System already configured, skipping user creation"
        return
    fi

    USER_ID=$(id -u "${USER_NAME}")
    GROUP_ID=$(id -g "${USER_NAME}")

    information "Copying skeleton files to /home/${USER_NAME}"
    cp -rT /etc/skel "/home/${USER_NAME}"

    if [ -d "/home/${USER_NAME}" ]; then
        if [ "${LINK_USER_DIRS}" = "true" ] && [ "${WRITABLE}" = "true" ] && ([ "${FS_TYPE}" = "vfat" ] || [ "${FS_TYPE}" = "ntfs" ] || [ "${FS_TYPE}" = "exfat" ]); then
            chmod 777 "${TARGET_DIR}"
            information "Creating user directories without symbolic links"
            for DIR in Desktop Public Templates; do
                TARGET_DIR_PATH="/home/${USER_NAME}/${DIR}"

                if [ ! -d "${TARGET_DIR_PATH}" ]; then
                    information "Creating directory: ${TARGET_DIR_PATH}"
                    mkdir -p "${TARGET_DIR_PATH}"
                fi
            done
            information "Linking user directories and ensuring writable target directories"
            for DIR in Documents Downloads Music Pictures Videos; do
                TARGET_DIR_PATH="${TARGET_DIR}/${DIR}"

                if [ ! -d "${TARGET_DIR_PATH}" ]; then
                    information "Creating target directory: ${TARGET_DIR_PATH}"
                    mkdir -p "${TARGET_DIR_PATH}"
                fi

                if [ ! -L "/home/${USER_NAME}/${DIR}" ]; then
                    information "Creating symbolic link: /home/${USER_NAME}/${DIR} -> ${TARGET_DIR_PATH}"
                    #ln -s "${TARGET_DIR_PATH}" "/home/${USER_NAME}/${DIR}"
                    mount --bind "${TARGET_DIR_PATH}" "/home/${USER_NAME}/${DIR}"
                fi
            done
        else
            information "Creating user directories without symbolic links"
            for DIR in Desktop Documents Downloads Music Pictures Public Templates Videos; do
                TARGET_DIR_PATH="/home/${USER_NAME}/${DIR}"

                if [ ! -d "${TARGET_DIR_PATH}" ]; then
                    information "Creating directory: ${TARGET_DIR_PATH}"
                    mkdir -p "${TARGET_DIR_PATH}"
                fi
            done
        fi

        if [ ! -d "/home/${USER_NAME}/.ssh" ]; then
            information "Creating .ssh directory"
            mkdir "/home/${USER_NAME}/.ssh"
            chmod 700 "/home/${USER_NAME}/.ssh"
        fi

        if [ -f /root/.ssh/authorized_keys ]; then
            information "Copying authorized_keys to user's .ssh directory"
            cp /root/.ssh/authorized_keys "/home/${USER_NAME}/.ssh/authorized_keys"
        fi

        information "Setting ownership for /home/${USER_NAME}"
        chown ${USER_ID}:${GROUP_ID} "/home/${USER_NAME}"
        information "Setting ownership recursively for /home/${USER_NAME}"
        chown -R ${USER_ID}:${GROUP_ID} "/home/${USER_NAME}"
    else
        error "Failed to find home directory for user ${USER_NAME}"
        return 1
    fi
}

# This function allows changing the username and user group. It is useful when the username needs to be changed without affecting the user's files.
change_user() {
    local USER_NAME="$1"
    local USER_GROUP="${USER_NAME}"
    local CURRENT_USER_NAME="$2"
    local CURRENT_USER_GROUP="$3"

    # Check if the current username is not empty and different from the new username
    if [ -n "${CURRENT_USER_NAME}" ] && [ "${USER_NAME}" != "${CURRENT_USER_NAME}" ]; then
        information "Changing user from ${CURRENT_USER_NAME} to ${USER_NAME}"

        # Change the username
        if usermod -l "${USER_NAME}" "${CURRENT_USER_NAME}"; then
            information "Username changed from ${CURRENT_USER_NAME} to ${USER_NAME}"
        else
            error "Failed to change username from ${CURRENT_USER_NAME} to ${USER_NAME}"
            return 1
        fi

        # Move the user's home directory to the new location
        if usermod -m -d "/home/${USER_NAME}" "${USER_NAME}"; then
            information "Home directory moved to /home/${USER_NAME}"
        else
            error "Failed to move home directory for ${USER_NAME}"
            return 1
        fi

        # Change the user group name
        if groupmod -n "${USER_GROUP}" "${CURRENT_USER_GROUP}"; then
            information "User group changed from ${CURRENT_USER_GROUP} to ${USER_GROUP}"
        else
            error "Failed to change user group from ${CURRENT_USER_GROUP} to ${USER_GROUP}"
            return 1
        fi
    else
        warning "No change needed: either the current user is the same or the current username is empty."
    fi
}

# only allow 'root' to run the script
allow_root_only() {
    if [ $(id -u) -ne 0 ]; then
        error "This script should be run as 'root'!"
        exit 1
    fi

    export HOME=/root
    export LC_ALL=C
}

# Check the original value of the set options.
determine_option_status() {
    local OPTION="${1}"
    local SET_OPTION="SET_${OPTION^^}"

    if [[ $- == *${OPTION}* ]]; then
        eval "${SET_OPTION}='true'"
    else
        eval "${SET_OPTION}='false'"
    fi
}

# Print the current status of the set options.
print_option_status() {
    local OPTION="${1}"
    local SET_OPTION="SET_${OPTION^^}"

    if [[ $- == *${OPTION}* ]]; then
        echo "Option -${OPTION} is currently set."
    else
        echo "Option -${OPTION} is currently unset."
    fi
}

# The toggle_shell_options function temporarily toggles Bash shell options for specific code segments.
# Usage: toggle_shell_options "eu"
# This will toggle the -e and -u options.
#
# Cycle in a script:
#   #!/bin/bash
#   set -eu
#   SET_E=""
#   SET_U=""
#   toggle_shell_options "e"  # Disables "e"
#   # Your code
#   toggle_shell_options "e"  # Re-enables "e"
#
# Remember: Declare SET_x variables for each option you plan to toggle. For example, SET_E for "e".
toggle_shell_options() {
    local OPTIONS="${1}"
    for ((i = 0; i < ${#OPTIONS}; i++)); do
        local OPTION="${OPTIONS:$i:1}"
        local SET_OPTION="SET_${OPTION^^}"

        if [ -z "${!SET_OPTION}" ]; then
            determine_option_status "${OPTION}"
            if [ "${!SET_OPTION}" = "true" ]; then
                set "+${OPTION}"
                #print_option_status "${OPTION}"
                continue
            fi
        fi

        if [ "${!SET_OPTION}" = "true" ]; then
            set "-${OPTION}"
            eval "${SET_OPTION}=''"
            #print_option_status "${OPTION}"
        fi
    done
}

# Display an error message.
error() {
    local MESSAGE="${1-}"
    if [ "$OUTPUT_MODE" = "console" ]; then
        echo -e "${BOLD}${RED}E:${ENDCOLOR} $MESSAGE" >&2
    else
        echo "E: $MESSAGE" >&2
    fi
}

# Display a warning message.
warning() {
    local MESSAGE="${1-}"
    if [ "$OUTPUT_MODE" = "console" ]; then
        echo -e "${BOLD}${YELLOW}W:${ENDCOLOR} $MESSAGE"
    else
        echo "W: $MESSAGE"
    fi
}

# Display an information message.
information() {
    local MESSAGE="${1-}"
    if [ "$OUTPUT_MODE" = "console" ]; then
        echo -e "${BOLD}${BLUE}I:${ENDCOLOR} $MESSAGE"
    else
        echo "I: $MESSAGE"
    fi
}

declare_locales() {
    # LOCALES is an associative array where each key-value pair is a locale with its related configurations.
    # Key: Locale code (e.g., "en_US" for American English)
    # Value: A comma-separated string that defines the following:
    #   1. Keyboard layout code (e.g., "us" for U.S. layout)
    #   2. Keyboard layout name (e.g., "English (US)")
    #   3. Firefox locale name in Debian
    #   4. Firefox locale name in Ubuntu (Mozilla repository)
    #   5. LibreOffice locale name in Debian and in Ubuntu
    #   6. LibreOffice LC_MESSAGES
    declare -Ag LOCALES=(
        ["de_DE"]="de,German,de,de,de,de"
        ["en_US"]="us,English (US),,en,,"
        ["es_ES"]="es,Spanish,es-es,es,es,es"
        ["fr_FR"]="fr,French,fr,fr,fr,fr"
        ["it_IT"]="it,Italian,it,it,it,it"
        ["pt_BR"]="br,Portuguese (Brazil),pt-br,pt,pt-br,br"
        ["ru_RU"]="ru,Russian,ru,ru,ru,ru"
    )
}

# Function to check if the system is running on any virtual machine
is_virtual() {
    local VM_TYPE="${1:-VirtualBox|VMware|KVM|QEMU|Xen|Hyper-V}"
    if grep -qE "$VM_TYPE" /sys/class/dmi/id/product_name 2>/dev/null; then
        return 0
    elif grep -qE "$VM_TYPE" /sys/class/dmi/id/product_version 2>/dev/null; then
        return 0
    elif [[ "$VM_TYPE" == "Hyper-V" && -d /sys/hypervisor ]]; then
        return 0
    else
        return 1
    fi
}

#------- LIBMINIOSLIVE -------
